#pragma kernel GenerateDensity
#include "/Includes/Density.compute"
#include "/Includes/Noise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float hardFloor;
float hardFloorWeight;

// Aditional, for programmer's free use
float4 params;

[numthreads(numThreads, numThreads, numThreads)]
void GenerateDensity(int3 id : SV_DispatchThreadID)
{
	if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
		return;
	}

	float3 pos = centre + id * spacing - boundsSize / 2;

	float noise = 0;
	float maxVal = 0;

	float frequency = noiseScale / 100;
	float amplitude = 1;
	float weight = 1;
	for (int j = 0; j < octaves; j++) {
		float n = snoise((pos)*frequency + offsets[j]);
		n = 1 - abs(n);
		noise += n * amplitude;
		maxVal += amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}

	float finalVal = -(pos.y + floorOffset) + noise * noiseWeight;
	maxVal = sign(pos.y) * (pos.y + floorOffset) + maxVal * noiseWeight;

	if (pos.y < hardFloor) {
		finalVal += hardFloorWeight;
		maxVal += hardFloorWeight;
	}

	finalVal /= maxVal;

	int index = indexFromCoord(id.x, id.y, id.z);
	points[index] = float4(pos, finalVal);
}

